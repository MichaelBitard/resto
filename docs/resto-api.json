{
    "info": {
        "contact": {
            "email": "jerome.gasperi@gmail.com"
        }, 
        "description": "A metadata catalog and search engine for geospatialized data", 
        "version": "6.0.0", 
        "title": "Welcome to resto"
    }, 
    "paths": {
        "/collections/{collectionId}/items": {
            "post": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "featureId": "c4f6ed9f-35ba-5c85-8449-e437c14ae428", 
                                    "message": "Feature inserted", 
                                    "collection": "S2"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "featureId": {
                                            "type": "string", 
                                            "description": "Newly created feature identifier"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }, 
                                        "collection": {
                                            "type": "string", 
                                            "description": "Collection identifier in which feature is inserted"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "Feature is inserted within collection"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Collection not found"
                    }, 
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }, 
                        "description": "Only user with *update* rights can add feature to collection"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Invalid feature description"
                    }, 
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }, 
                        "description": "Feature is already present in database"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }, 
                    {
                        "style": "form", 
                        "description": "Simplify input geometry with tolerance in degrees (use in conjunction with *maxpoints*). [IMPORTANT] Simplification only affects the internal indexed geometry used by the search engine. The original geometry is stored unmodified.", 
                        "required": false, 
                        "name": "tolerance", 
                        "in": "query", 
                        "schema": {
                            "type": "number"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "If tolerance is set, geometry simplification of input geometry is performed only if the number of geometry vertices is greater than *maxpoints*", 
                        "required": false, 
                        "name": "maxpoints", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[ADDON][Tag] Set to false to not use iTag during feature insertion", 
                        "required": false, 
                        "name": "_useItag", 
                        "in": "query", 
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ], 
                "tags": [
                    "Collection"
                ], 
                "summary": "Add feature(s) to collection", 
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InputFeatureCollection"
                                    }, 
                                    {
                                        "$ref": "#/components/schemas/InputFeature"
                                    }
                                ]
                            }
                        }
                    }, 
                    "description": "Either a GeoJSON Feature or a GeoJSON FeatureCollection"
                }, 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "CollectionsAPI::insertFeatures"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestoFeatureCollection"
                                }
                            }
                        }, 
                        "description": "Features collection"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Collection not Found"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Bad request (i.e. invalid parameter)"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }, 
                    {
                        "style": "form", 
                        "description": "Free text search - OpenSearch {searchTerms}. Can include hashtags i.e. text starting with *#* characters. In this case, use the following:\n* *#cryosphere* will search for *cryosphere*\n* *#cryosphere #atmosphere* will search for *cryosphere* AND *atmosphere*\n* *#cryosphere|atmosphere* will search for *cryosphere* OR *atmosphere*\n* *#cryosphere!* will search for *cryosphere* OR any *broader* concept of *cryosphere* ([EXTENSION][SKOS])\n* *#cryosphere\\** will search for *cryosphere* OR any *narrower* concept of *cryosphere* ([EXTENSION][SKOS])\n* *#cryosphere~* will search for *cryosphere* OR any *related* concept of *cryosphere* ([EXTENSION][SKOS])", 
                        "required": false, 
                        "name": "q", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Number of results returned per page - between 1 and 500 (default 50) - OpenSearch {count}", 
                        "required": false, 
                        "name": "limit", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "First result to provide - minimum 1, (default 1) - OpenSearch {startIndex}", 
                        "required": false, 
                        "name": "startIndex", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "First page to provide - minimum 1, (default 1) - OpenSearch {startPage}", 
                        "required": false, 
                        "name": "page", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Two letters language code according to ISO 639-1 (default *en*) - OpenSearch {language}", 
                        "required": false, 
                        "name": "lang", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Array of item ids to return. All other filter parameters that further restrict the number of search results (except next and limit) are ignored", 
                        "required": false, 
                        "name": "ids", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Region of Interest defined in GeoJSON or in Well Known Text standard (WKT) with coordinates in decimal degrees (EPSG:4326) - OpenSearch {geo:geometry}", 
                        "required": false, 
                        "name": "intersects", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Region of Interest defined by 'west, south, east, north' coordinates of longitude, latitude, in decimal degrees (EPSG:4326) - OpenSearch {geo:box}", 
                        "required": false, 
                        "name": "bbox", 
                        "in": "query", 
                        "schema": {
                            "minItems": 4, 
                            "items": {
                                "type": "number"
                            }, 
                            "type": "array", 
                            "maxItems": 6
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[EXTENSION][egg] Location string e.g. Paris, France  or toponym identifier (i.e. geouid:xxxx) - OpenSearch {geo:name}", 
                        "required": false, 
                        "name": "name", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Longitude expressed in decimal degrees (EPSG:4326) - should be used with geo:lat - OpenSearch {geo:lon}", 
                        "required": false, 
                        "name": "lon", 
                        "in": "query", 
                        "schema": {
                            "type": "number"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Latitude expressed in decimal degrees (EPSG:4326) - should be used with geo:lon - OpenSearch {geo:lat}", 
                        "required": false, 
                        "name": "lat", 
                        "in": "query", 
                        "schema": {
                            "type": "number"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Radius expressed in meters - should be used with geo:lon and geo:lat - OpenSearch {geo:radius}", 
                        "required": false, 
                        "name": "radius", 
                        "in": "query", 
                        "schema": {
                            "type": "number"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Single date+time, or a range ('/' separator) of the search query. Format should follow RFC-3339 - OpenSearch {time:start}/{time:end}", 
                        "required": false, 
                        "name": "datetime", 
                        "in": "query", 
                        "schema": {
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$", 
                            "type": "string", 
                            "format": "date-time"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Beginning of the time slice of the search query. Format should follow RFC-3339 - OpenSearch {time:start}.", 
                        "required": false, 
                        "name": "start", 
                        "in": "query", 
                        "schema": {
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$", 
                            "type": "string", 
                            "format": "date-time"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "End of the time slice of the search query. Format should follow RFC-3339 - OpenSearch {time:end}", 
                        "required": false, 
                        "name": "end", 
                        "in": "query", 
                        "schema": {
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$", 
                            "type": "string", 
                            "format": "date-time"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Returns products with metadata publication date greater or equal than *published* - OpenSearch {dc:date}", 
                        "required": false, 
                        "name": "published", 
                        "in": "query", 
                        "schema": {
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$", 
                            "type": "string", 
                            "format": "date-time"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Returns features with *sort* key value greater than *prev* value - use this for pagination. The value is a unique iterator computed from the *sort* key value and provided within each feature properties as *sort_idx* property", 
                        "required": false, 
                        "name": "prev", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Returns features with *sort* key value lower than *next* value - use this for pagination. The value is a unique iterator computed from the *sort* key value and provided within each feature properties as *sort_idx* property", 
                        "required": false, 
                        "name": "next", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Like on product identifier", 
                        "required": false, 
                        "name": "pid", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Sort results by property *startDate* or *created* (default *startDate*). Sorting order is DESCENDING (ASCENDING if property is prefixed by minus sign)", 
                        "required": false, 
                        "name": "sort", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Limit search to owner's features", 
                        "required": false, 
                        "name": "owner", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[EXTENSION][social] Limit search to number of likes (interval)", 
                        "required": false, 
                        "name": "likes", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[EXTENSION][social] Return only liked features from calling user", 
                        "required": false, 
                        "name": "liked", 
                        "in": "query", 
                        "schema": {
                            "type": "boolean"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Feature status (unusued)", 
                        "required": false, 
                        "name": "status", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string identifying the entry type (e.g. ER02_SAR_IM__0P, MER_RR__1P, SM_SLC__1S, GES_DISC_AIRH3STD_V005) - OpenSearch {eo:productType}", 
                        "required": false, 
                        "name": "productType", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string identifying the processing level applied to the entry - OpenSearch {eo:processingLevel}", 
                        "required": false, 
                        "name": "processingLevel", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string with the platform short name (e.g. Sentinel-1) - OpenSearch {eo:platform}", 
                        "required": false, 
                        "name": "platform", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string identifying the instrument (e.g. MERIS, AATSR, ASAR, HRVIR. SAR) - OpenSearch {eo:instrument}", 
                        "required": false, 
                        "name": "instrument", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string identifying the sensor type. Suggested values are: OPTICAL, RADAR, ALTIMETRIC, ATMOSPHERIC, LIMB - OpenSearch {eo:sensorType}", 
                        "required": false, 
                        "name": "sensorType", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][OpticalModel] Cloud cover expressed in percent", 
                        "required": false, 
                        "name": "cloudCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][OpticalModel] Snow cover expressed in percent", 
                        "required": false, 
                        "name": "snowCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Water area expressed in percent", 
                        "required": false, 
                        "name": "waterCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Urban area expressed in percent", 
                        "required": false, 
                        "name": "urbanCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Ice area expressed in percent", 
                        "required": false, 
                        "name": "iceCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Herbaceous area expressed in percent", 
                        "required": false, 
                        "name": "herbaceousCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Forest area expressed in percent", 
                        "required": false, 
                        "name": "forestCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Flooded area expressed in percent", 
                        "required": false, 
                        "name": "floodedCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Desert area expressed in percent", 
                        "required": false, 
                        "name": "desertCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Cultivated area expressed in percent", 
                        "required": false, 
                        "name": "cultivatedCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }
                ], 
                "tags": [
                    "Feature"
                ], 
                "description": "List of filters to search features within collection {collectionId}", 
                "summary": "Get features (search on a specific collection)", 
                "operationId": "FeaturesAPI::getFeaturesInCollection"
            }
        }, 
        "/collections/{collectionId}/items/{featureId}/{property}": {
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "message": "Update property for feature b9eeaf6b-9868-5418-9455-3e77cd349e21"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "The property is updated"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Feature not found"
                    }, 
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }, 
                        "description": "Forbidden"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Invalid property"
                    }
                }, 
                "description": "Update {property} for feature {featureId}", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Feature identifier", 
                        "required": true, 
                        "name": "featureId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "enum": [
                                "title", 
                                "description", 
                                "visibility", 
                                "owner", 
                                "status"
                            ], 
                            "type": "string"
                        }, 
                        "description": "Property to update", 
                        "required": true, 
                        "name": "property", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "Feature"
                ], 
                "summary": "Update feature property", 
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "value": 1
                            }, 
                            "schema": {
                                "type": "object", 
                                "properties": {
                                    "value": {
                                        "description": "New property value"
                                    }
                                }
                            }
                        }
                    }, 
                    "description": "Property value to update"
                }, 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "FeaturesAPI::updateFeatureProperty"
            }
        }, 
        "/conformance": {
            "get": {
                "operationId": "ServicesAPI::conformance", 
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "conformsTo": {
                                            "items": {
                                                "type": "string"
                                            }, 
                                            "type": "array", 
                                            "description": "Array of conformance specification urls"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "OGC API Feature conformance definition"
                    }, 
                    "404": {
                        "description": "Not found"
                    }
                }, 
                "summary": "Conformance page", 
                "description": "Returns the OGC API Feature conformance description as JSON document", 
                "tags": [
                    "Server"
                ]
            }
        }, 
        "/auth/activate/{token}": {
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "profile": {
                                        "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400", 
                                        "followed": false, 
                                        "name": "jrom", 
                                        "firstname": "J\u00e9r\u00f4me", 
                                        "bio": "Working on new features for the next major release of SnapPlanet", 
                                        "lastname": "Gasperi", 
                                        "followings": 144, 
                                        "topics": "earth,fires,geology,glaciology,volcanism", 
                                        "followme": false, 
                                        "followers": 185, 
                                        "groups": [
                                            "1"
                                        ], 
                                        "id": "1356771884787565573", 
                                        "registrationdate": "2016-10-08T22:50:34.187217Z"
                                    }, 
                                    "token": "eyJzdWIiOiIxOTQ2NTIwMjk3MjEzNTI3MDUyIiwiaWF0IjoxNTQ2MjY2NTU3LCJleHAiOjE1NDYyNzAxNTd9.nI4q0LBqGOG0a6GCjxWvUiVA6hKndN9mJrjuT1WG1Xo"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "profile": {
                                            "description": "User profile", 
                                            "$ref": "#/components/schemas/UserDisplayProfile"
                                        }, 
                                        "token": {
                                            "type": "string", 
                                            "description": "Authentication token"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "Activation status - user activated or not"
                    }, 
                    "400": {
                        "description": "Bad request"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Activation token", 
                        "required": true, 
                        "name": "token", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "User"
                ], 
                "description": "Activate registered user", 
                "summary": "Activate a user", 
                "operationId": "activateUser"
            }
        }, 
        "/auth/check/{token}": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "isValid": false, 
                                    "message": "Token checked"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "isValid": {
                                            "type": "boolean", 
                                            "description": "True if valid - False if not"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Token checked"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "Return token validity"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Security token", 
                        "required": true, 
                        "name": "token", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "User"
                ], 
                "description": "Check if security token associated to user is valid. Usually security token is used to temporarely replace authentication to download/visualize ressources", 
                "summary": "Check token validity", 
                "operationId": "checkToken"
            }
        }, 
        "/api.{format}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OpenAPI 3.0 definition"
                    }, 
                    "404": {
                        "description": "Not found"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "enum": [
                                "json", 
                                "html"
                            ], 
                            "type": "string"
                        }, 
                        "description": "Output format - *json* or *html*", 
                        "required": true, 
                        "name": "format", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "Server"
                ], 
                "description": "Returns the server API definition as an OpenAPI 3.0 JSON document (default) or as an HTML page (if format is specified and set to *html*)", 
                "summary": "OpenAPI definition", 
                "operationId": "ServicesAPI::api"
            }
        }, 
        "/": {
            "get": {
                "operationId": "ServicesAPI::hello", 
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "description": {
                                            "type": "string", 
                                            "description": "Server description"
                                        }, 
                                        "links": {
                                            "items": {
                                                "$ref": "#/components/schemas/Link"
                                            }, 
                                            "type": "array", 
                                            "description": "Landing page conforms to OGC API Feature\n(see https://github.com/opengeospatial/ogcapi-features/blob/master/core/standard/17-069.adoc)"
                                        }, 
                                        "id": {
                                            "type": "string", 
                                            "description": "Server identifier."
                                        }, 
                                        "capabilities": {
                                            "items": {
                                                "type": "string"
                                            }, 
                                            "type": "array", 
                                            "description": "Array of resto-addons list. Used client side to detect resto capabilities"
                                        }, 
                                        "title": {
                                            "type": "string", 
                                            "description": "Server title"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "Server landing page"
                    }, 
                    "404": {
                        "description": "Not found"
                    }
                }, 
                "summary": "Landing page", 
                "description": "Landing page for the server. Should be used by client to automatically detects endpoints to API, collections, etc.", 
                "tags": [
                    "Server"
                ]
            }
        }, 
        "/services/osdd/{collectionId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OpenSearch Document Description (OSDD)"
                    }, 
                    "404": {
                        "description": "Collection not found"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "Collection"
                ], 
                "description": "Returns the OpenSearch Document Description (OSDD) for the search service of collection {collectionId}", 
                "summary": "Get OpenSearch Description Document for a collection", 
                "operationId": "ServicesAPI::getOSDDForCollection"
            }
        }, 
        "/collections/{collectionId}/items/{featureId}": {
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "message": "Update feature b9eeaf6b-9868-5418-9455-3e77cd349e21"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "The feature is updated"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Feature not found"
                    }, 
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }, 
                        "description": "Forbidden"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Invalid property"
                    }
                }, 
                "description": "Update feature {featureId}", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Feature identifier", 
                        "required": true, 
                        "name": "featureId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "Feature"
                ], 
                "summary": "Update feature property", 
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InputFeature"
                            }
                        }
                    }, 
                    "description": "Feature description"
                }, 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "FeaturesAPI::updateFeature"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutputFeature"
                                }
                            }
                        }, 
                        "description": "Feature metadata"
                    }, 
                    "404": {
                        "description": "Feature not found"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Feature identifier", 
                        "required": true, 
                        "name": "featureId", 
                        "in": "path"
                    }, 
                    {
                        "style": "form", 
                        "description": "Comma separated list of property fields to be returned. The following reserved keywords can also be used:\n* _all: Return all properties (This is the default)\n* _simple: Return all fields except *keywords* property", 
                        "required": false, 
                        "name": "fields", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }
                ], 
                "tags": [
                    "Feature"
                ], 
                "description": "Returns feature {featureId} metadata", 
                "summary": "Get feature", 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "FeaturesAPI::getFeature"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "message": "Feature 7e5caa78-5127-53e5-97ff-ddf44984ef56 deleted"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "The feature is delete"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Feature not found"
                    }, 
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }, 
                        "description": "Only user with *update* rights can delete a feature"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Missing mandatory feature identifier"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Feature identifier", 
                        "required": true, 
                        "name": "featureId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "Feature"
                ], 
                "description": "Delete feature {featureId}", 
                "summary": "Delete feature", 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "FeaturesAPI::deleteFeature"
            }
        }, 
        "/services/osdd": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OpenSearch Document Description (OSDD)"
                    }, 
                    "404": {
                        "description": "Collection not found"
                    }
                }, 
                "parameters": [
                    {
                        "style": "form", 
                        "description": "Limit description to collections belonging to *model* - e.g. *model=SatelliteModel* will search in all satellite collections", 
                        "required": false, 
                        "name": "model", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }
                ], 
                "tags": [
                    "Collection"
                ], 
                "description": "Returns the OpenSearch Document Description (OSDD) for the search service on all collections", 
                "summary": "Get OpenSearch Description Document for all collections", 
                "operationId": "ServicesAPI::getOSDD"
            }
        }, 
        "/collections": {
            "post": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "message": "Collection S2 created"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "The collection is created"
                    }, 
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }, 
                        "description": "Only user with *create* rights can create a collection"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Missing mandatory collection id or collection already exist"
                    }
                }, 
                "tags": [
                    "Collection"
                ], 
                "summary": "Create collection", 
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InputCollection"
                            }
                        }
                    }, 
                    "description": "Collection description"
                }, 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "CollectionsAPI::createCollection"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "collections": [
                                        {
                                            "description": "Landsat represents the world's longest continuously acquired collection of space-based moderate-resolution land remote sensing data. Four decades of imagery provides a unique resource for those who work in agriculture, geology, forestry, regional planning, education, mapping, and global change research. Landsat images are also invaluable for emergency response and disaster relief", 
                                            "license": "proprietary", 
                                            "title": "Landsat-8", 
                                            "links": [
                                                {
                                                    "href": "http://127.0.0.1:5252/collections.json?&_pretty=1", 
                                                    "type": "application/json", 
                                                    "rel": "self"
                                                }, 
                                                {
                                                    "href": "http://127.0.0.1:5252", 
                                                    "type": "application/json", 
                                                    "rel": "root"
                                                }
                                            ], 
                                            "resto:info": {
                                                "lineage": [
                                                    "DefaultModel", 
                                                    "LandCoverModel", 
                                                    "SatelliteModel", 
                                                    "OpticalModel"
                                                ], 
                                                "osDescription": {
                                                    "Attribution": "USGS/NASA Landsat", 
                                                    "Description": "Landsat represents the world's longest continuously acquired collection of space-based moderate-resolution land remote sensing data. Four decades of imagery provides a unique resource for those who work in agriculture, geology, forestry, regional planning, education, mapping, and global change research. Landsat images are also invaluable for emergency response and disaster relief", 
                                                    "Tags": "landsat level1C USGS", 
                                                    "Contact": "jrom@snapplanet.io", 
                                                    "LongName": "Images Landsat-8 niveau 1C", 
                                                    "Query": "USA 2019", 
                                                    "ShortName": "Landsat-8", 
                                                    "Developer": "J\\u00e9r\\u00f4me Gasperi"
                                                }, 
                                                "model": "OpticalModel", 
                                                "owner": "203883411255198721"
                                            }, 
                                            "stac_version": "0.8.0", 
                                            "stac_extensions": [
                                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                                            ], 
                                            "extent": {
                                                "temporal": {
                                                    "trs": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian", 
                                                    "interval": [
                                                        [
                                                            "2019-05-19T13:59:47.695508Z", 
                                                            "2019-06-06T13:28:04.338517Z"
                                                        ]
                                                    ]
                                                }, 
                                                "spatial": {
                                                    "crs": "http://www.opengis.net/def/crs/OGC/1.3/CRS84", 
                                                    "bbox": [
                                                        [
                                                            -180, 
                                                            -77.28054, 
                                                            180, 
                                                            82.77201
                                                        ]
                                                    ]
                                                }
                                            }, 
                                            "keywords": [
                                                "landsat", 
                                                "level1C", 
                                                "USGS"
                                            ], 
                                            "summaries": {
                                                "processingLevel": [
                                                    "LEVEL1C"
                                                ], 
                                                "datetime": {
                                                    "minimum": "2019-05-19T13:59:47.695508Z", 
                                                    "maximum": "2019-06-06T13:28:04.338517Z"
                                                }, 
                                                "sensorType": [
                                                    "OPTICAL"
                                                ], 
                                                "eo:platform": [
                                                    "LANDSAT_8"
                                                ], 
                                                "productType": [
                                                    "L1GT", 
                                                    "L1TP"
                                                ], 
                                                "eo:instrument": [
                                                    "OLI_TIRS", 
                                                    "TIRS"
                                                ]
                                            }, 
                                            "id": "L8"
                                        }
                                    ], 
                                    "summaries": {
                                        "resto:stats": {
                                            "count": 11310, 
                                            "facets": {
                                                "collection": {
                                                    "L8": 11307
                                                }
                                            }
                                        }
                                    }, 
                                    "extent": {
                                        "temporal": {
                                            "trs": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian", 
                                            "interval": [
                                                [
                                                    "2018-09-13T05:58:08.367000Z", 
                                                    "2019-06-11T16:11:41.808000Z"
                                                ]
                                            ]
                                        }, 
                                        "spatial": {
                                            "crs": "http://www.opengis.net/def/crs/OGC/1.3/CRS84", 
                                            "bbox": [
                                                [
                                                    -180, 
                                                    -77.28054, 
                                                    180, 
                                                    82.77201
                                                ]
                                            ]
                                        }
                                    }, 
                                    "resto:info": {
                                        "osDescription": {
                                            "Attribution": "Copyright 2018, All Rights Reserved", 
                                            "Description": "Search on all collections", 
                                            "Tags": "resto", 
                                            "Contact": "jerome.gasperi@gmail.com", 
                                            "LongName": "resto search service", 
                                            "Query": "europe 2015", 
                                            "ShortName": "resto", 
                                            "Developer": "J\\u00e9r\\u00f4me Gasperi"
                                        }
                                    }
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "collections": {
                                            "items": {
                                                "$ref": "#/components/schemas/OutputCollection"
                                            }, 
                                            "type": "array", 
                                            "description": "List of available collections"
                                        }, 
                                        "summaries": {
                                            "type": "object", 
                                            "description": "Return collections descriptions"
                                        }, 
                                        "extent": {
                                            "type": "object", 
                                            "$ref": "#/components/schemas/Extent"
                                        }, 
                                        "resto:info": {
                                            "type": "object", 
                                            "description": "resto additional information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "List of all collection descriptions"
                    }
                }, 
                "parameters": [
                    {
                        "style": "form", 
                        "description": "Set to get individual statistics for all collection", 
                        "required": false, 
                        "name": "_stats", 
                        "in": "query", 
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ], 
                "tags": [
                    "Collection"
                ], 
                "description": "Returns a list of all collection descriptions including statistics (i.e. number of products, etc.)", 
                "summary": "Get collections", 
                "operationId": "CollectionsAPI::getCollections"
            }
        }, 
        "/auth": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "profile": {
                                        "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400", 
                                        "followed": false, 
                                        "name": "jrom", 
                                        "firstname": "J\u00e9r\u00f4me", 
                                        "bio": "Working on new features for the next major release of SnapPlanet", 
                                        "lastname": "Gasperi", 
                                        "followings": 144, 
                                        "topics": "earth,fires,geology,glaciology,volcanism", 
                                        "followme": false, 
                                        "followers": 185, 
                                        "groups": [
                                            "1"
                                        ], 
                                        "id": "1356771884787565573", 
                                        "registrationdate": "2016-10-08T22:50:34.187217Z"
                                    }, 
                                    "token": "eyJzdWIiOiIxOTQ2NTIwMjk3MjEzNTI3MDUyIiwiaWF0IjoxNTQ2MjY2NTU3LCJleHAiOjE1NDYyNzAxNTd9.nI4q0LBqGOG0a6GCjxWvUiVA6hKndN9mJrjuT1WG1Xo"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "profile": {
                                            "description": "User profile", 
                                            "$ref": "#/components/schemas/UserDisplayProfile"
                                        }, 
                                        "token": {
                                            "type": "string", 
                                            "description": "A rJWT token"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "A fresh authentication token (aka rJWT)"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }
                }, 
                "tags": [
                    "Authentication"
                ], 
                "description": "Get a fresh authentication token (aka rJWT).", 
                "summary": "Get an authentication token", 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "AuthAPI::getToken"
            }
        }, 
        "/collections/{collectionId}": {
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "message": "Collection S2 updated"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "The collection is created"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Collection not found"
                    }, 
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }, 
                        "description": "Only user with *update* rights can update a collection"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Missing mandatory collection id"
                    }
                }, 
                "description": "Note that *collectionId* and *model* properties cannot be updated", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "Collection"
                ], 
                "summary": "Update collection", 
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InputCollection"
                            }
                        }
                    }, 
                    "description": "Collection description"
                }, 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "CollectionsAPI::updateCollection"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutputCollection"
                                }
                            }
                        }, 
                        "description": "Collection description"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Collection not found"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "boolean"
                        }, 
                        "description": "True to return full statistics in summaries property. Default is *false*", 
                        "style": "form", 
                        "name": "_stats", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "Collection"
                ], 
                "description": "Returns collection description including statistics (i.e. number of products, etc.)", 
                "summary": "Get collection", 
                "operationId": "CollectionsAPI::getCollection"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "message": "Collection S2 deleted"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "The collection is delete"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Collection not found"
                    }, 
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }, 
                        "description": "Only user with *update* rights can delete a collection"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Missing mandatory collection id"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Collection identifier", 
                        "required": true, 
                        "name": "collectionId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "Collection"
                ], 
                "description": "For security reason, only empty collection can be deleted", 
                "summary": "Delete collection", 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "CollectionsAPI::deleteCollection"
            }
        }, 
        "/search": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestoFeatureCollection"
                                }
                            }
                        }, 
                        "description": "Features collection"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Collection not Found"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Bad request (i.e. invalid parameter)"
                    }
                }, 
                "parameters": [
                    {
                        "style": "form", 
                        "description": "Search features within collections belonging to *model* - e.g. *model=SatelliteModel* will search in all satellite collections", 
                        "required": false, 
                        "name": "model", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Search features within collections - comma separated list of collection identifiers", 
                        "required": false, 
                        "name": "collections", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Free text search - OpenSearch {searchTerms}. Can include hashtags i.e. text starting with *#* characters. In this case, use the following:\n* *#cryosphere* will search for *cryosphere*\n* *#cryosphere #atmosphere* will search for *cryosphere* AND *atmosphere*\n* *#cryosphere|atmosphere* will search for *cryosphere* OR *atmosphere*\n* *#cryosphere!* will search for *cryosphere* OR any *broader* concept of *cryosphere* ([EXTENSION][SKOS])\n* *#cryosphere\\** will search for *cryosphere* OR any *narrower* concept of *cryosphere* ([EXTENSION][SKOS])\n* *#cryosphere~* will search for *cryosphere* OR any *related* concept of *cryosphere* ([EXTENSION][SKOS])", 
                        "required": false, 
                        "name": "q", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Number of results returned per page - between 1 and 500 (default 50) - OpenSearch {count}", 
                        "required": false, 
                        "name": "limit", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "First result to provide - minimum 1, (default 1) - OpenSearch {startIndex}", 
                        "required": false, 
                        "name": "startIndex", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "First page to provide - minimum 1, (default 1) - OpenSearch {startPage}", 
                        "required": false, 
                        "name": "page", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Two letters language code according to ISO 639-1 (default *en*) - OpenSearch {language}", 
                        "required": false, 
                        "name": "lang", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Array of item ids to return. All other filter parameters that further restrict the number of search results (except next and limit) are ignored", 
                        "required": false, 
                        "name": "ids", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Region of Interest defined in GeoJSON or in Well Known Text standard (WKT) with coordinates in decimal degrees (EPSG:4326) - OpenSearch {geo:geometry}", 
                        "required": false, 
                        "name": "intersects", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Region of Interest defined by 'west, south, east, north' coordinates of longitude, latitude, in decimal degrees (EPSG:4326) - OpenSearch {geo:box}", 
                        "required": false, 
                        "name": "bbox", 
                        "in": "query", 
                        "schema": {
                            "minItems": 4, 
                            "items": {
                                "type": "number"
                            }, 
                            "type": "array", 
                            "maxItems": 6
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[EXTENSION][egg] Location string e.g. Paris, France  or toponym identifier (i.e. geouid:xxxx) - OpenSearch {geo:name}", 
                        "required": false, 
                        "name": "name", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Longitude expressed in decimal degrees (EPSG:4326) - should be used with geo:lat - OpenSearch {geo:lon}", 
                        "required": false, 
                        "name": "lon", 
                        "in": "query", 
                        "schema": {
                            "type": "number"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Latitude expressed in decimal degrees (EPSG:4326) - should be used with geo:lon - OpenSearch {geo:lat}", 
                        "required": false, 
                        "name": "lat", 
                        "in": "query", 
                        "schema": {
                            "type": "number"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Radius expressed in meters - should be used with geo:lon and geo:lat - OpenSearch {geo:radius}", 
                        "required": false, 
                        "name": "radius", 
                        "in": "query", 
                        "schema": {
                            "type": "number"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Single date+time, or a range ('/' separator) of the search query. Format should follow RFC-3339 - OpenSearch {time:start}/{time:end}", 
                        "required": false, 
                        "name": "datetime", 
                        "in": "query", 
                        "schema": {
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$", 
                            "type": "string", 
                            "format": "date-time"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Beginning of the time slice of the search query. Format should follow RFC-3339 - OpenSearch {time:start}", 
                        "required": false, 
                        "name": "start", 
                        "in": "query", 
                        "schema": {
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$", 
                            "type": "string", 
                            "format": "date-time"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "End of the time slice of the search query. Format should follow RFC-3339 - OpenSearch {time:end}", 
                        "required": false, 
                        "name": "end", 
                        "in": "query", 
                        "schema": {
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$", 
                            "type": "string", 
                            "format": "date-time"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Returns products with metadata creation date greater or equal than *created* - OpenSearch {dc:date}", 
                        "required": false, 
                        "name": "created", 
                        "in": "query", 
                        "schema": {
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$", 
                            "type": "string", 
                            "format": "date-time"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Returns features with *sort* key value greater than *prev* value - use this for pagination. The value is a unique iterator computed from the *sort* key value and provided within each feature properties as *sort_idx* property", 
                        "required": false, 
                        "name": "prev", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Returns features with *sort* key value lower than *next* value - use this for pagination. The value is a unique iterator computed from the *sort* key value and provided within each feature properties as *sort_idx* property", 
                        "required": false, 
                        "name": "next", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Like on product identifier", 
                        "required": false, 
                        "name": "pid", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Sort results by property *startDate* or *created* (default *startDate*). Sorting order is DESCENDING (ASCENDING if property is prefixed by minus sign)", 
                        "required": false, 
                        "name": "sort", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Limit search to owner's features", 
                        "required": false, 
                        "name": "owner", 
                        "in": "query", 
                        "schema": {
                            "type": "integer"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[EXTENSION][social] Limit search to number of likes (interval)", 
                        "required": false, 
                        "name": "likes", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[EXTENSION][social] Return only liked features from calling user", 
                        "required": false, 
                        "name": "liked", 
                        "in": "query", 
                        "schema": {
                            "type": "boolean"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Feature status (unusued)", 
                        "required": false, 
                        "name": "status", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string identifying the entry type (e.g. ER02_SAR_IM__0P, MER_RR__1P, SM_SLC__1S, GES_DISC_AIRH3STD_V005) - OpenSearch {eo:productType}", 
                        "required": false, 
                        "name": "productType", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string identifying the processing level applied to the entry - OpenSearch {eo:processingLevel}", 
                        "required": false, 
                        "name": "processingLevel", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string with the platform short name (e.g. Sentinel-1) - OpenSearch {eo:platform}", 
                        "required": false, 
                        "name": "platform", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string identifying the instrument (e.g. MERIS, AATSR, ASAR, HRVIR. SAR) - OpenSearch {eo:instrument}", 
                        "required": false, 
                        "name": "instrument", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][SatelliteModel] A string identifying the sensor type. Suggested values are: OPTICAL, RADAR, ALTIMETRIC, ATMOSPHERIC, LIMB - OpenSearch {eo:sensorType}", 
                        "required": false, 
                        "name": "sensorType", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][OpticalModel] Cloud cover expressed in percent", 
                        "required": false, 
                        "name": "cloudCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][OpticalModel] Snow cover expressed in percent", 
                        "required": false, 
                        "name": "snowCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Water area expressed in percent", 
                        "required": false, 
                        "name": "waterCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Urban area expressed in percent", 
                        "required": false, 
                        "name": "urbanCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Ice area expressed in percent", 
                        "required": false, 
                        "name": "iceCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Herbaceous area expressed in percent", 
                        "required": false, 
                        "name": "herbaceousCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Forest area expressed in percent", 
                        "required": false, 
                        "name": "forestCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Flooded area expressed in percent", 
                        "required": false, 
                        "name": "floodedCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Desert area expressed in percent", 
                        "required": false, 
                        "name": "desertCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "[MODEL][LandCoverModel] Cultivated area expressed in percent", 
                        "required": false, 
                        "name": "cultivatedCover", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "style": "form", 
                        "description": "Comma separated list of property fields to be returned. The following reserved keywords can also be used:\n* _all: Return all properties (This is the default)\n* _simple: Return all fields except *keywords* property", 
                        "required": false, 
                        "name": "fields", 
                        "in": "query", 
                        "schema": {
                            "type": "string"
                        }
                    }
                ], 
                "tags": [
                    "Feature"
                ], 
                "description": "List of filters to search features within all collections", 
                "summary": "STAC search endpoint", 
                "operationId": "STAC::search"
            }
        }, 
        "/users/{userid}": {
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "message": "Update profile for user john.doe@dev.null"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "User profile is updated"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Bad request"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "User's identifier", 
                        "required": true, 
                        "name": "userid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "User"
                ], 
                "summary": "Update user", 
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400", 
                                "topics": "earth,fires", 
                                "bio": "I just changed my picture, bio information and topics of interest list"
                            }, 
                            "schema": {
                                "type": "object", 
                                "properties": {
                                    "picture": {
                                        "type": "string", 
                                        "description": "An http(s) url to the user's avatar picture"
                                    }, 
                                    "name": {
                                        "type": "string", 
                                        "description": "User display name"
                                    }, 
                                    "firstname": {
                                        "type": "string", 
                                        "description": "User firstname"
                                    }, 
                                    "bio": {
                                        "type": "string", 
                                        "description": "User biography"
                                    }, 
                                    "lastname": {
                                        "type": "string", 
                                        "description": "User lastname"
                                    }, 
                                    "topics": {
                                        "type": "string", 
                                        "description": "Comma separated list of user's topics of interest"
                                    }, 
                                    "password": {
                                        "type": "string", 
                                        "description": "User password - don't worry it's encrypted server side"
                                    }
                                }
                            }
                        }
                    }, 
                    "required": true, 
                    "description": "User information to update"
                }, 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "UsersAPI::updateUserProfile"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDisplayProfile"
                                }
                            }
                        }, 
                        "description": "User profile"
                    }, 
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }, 
                        "description": "Resource not found"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "User's identifier", 
                        "required": true, 
                        "name": "userid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "User"
                ], 
                "summary": "Get user", 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "UsersAPI::getUserProfile"
            }
        }, 
        "/users": {
            "post": {
                "operationId": "UsersAPI::createUser", 
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400", 
                                "name": "jj", 
                                "firstname": "John", 
                                "bio": "Just a user", 
                                "lastname": "Doe", 
                                "topics": "earth,fires,geology,glaciology,volcanism", 
                                "country": "FR", 
                                "organization": "My nice company", 
                                "password": "MySuperSecretPassword", 
                                "email": "john.doe@dev.null"
                            }, 
                            "schema": {
                                "required": [
                                    "email", 
                                    "password"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "picture": {
                                        "type": "string", 
                                        "description": "An http(s) url to the user's avatar picture"
                                    }, 
                                    "name": {
                                        "type": "string", 
                                        "description": "User display name"
                                    }, 
                                    "firstname": {
                                        "type": "string", 
                                        "description": "User firstname"
                                    }, 
                                    "bio": {
                                        "type": "string", 
                                        "description": "User biography"
                                    }, 
                                    "lastname": {
                                        "type": "string", 
                                        "description": "User lastname"
                                    }, 
                                    "topics": {
                                        "type": "string", 
                                        "description": "Comma separated list of user's topics of interest"
                                    }, 
                                    "flags": {
                                        "type": "string", 
                                        "description": "[Unused] Comma separated list of flags"
                                    }, 
                                    "country": {
                                        "type": "string", 
                                        "description": "User country code (ISO 3166-1 alpha2 code)"
                                    }, 
                                    "organization": {
                                        "type": "string", 
                                        "description": "Organization name"
                                    }, 
                                    "password": {
                                        "type": "string", 
                                        "description": "User password - don't worry it's encrypted server side"
                                    }, 
                                    "email": {
                                        "type": "string", 
                                        "description": "User email"
                                    }
                                }
                            }
                        }
                    }, 
                    "required": true, 
                    "description": "User information to create user account"
                }, 
                "summary": "Create user", 
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "success", 
                                    "message": "User john.doe@dev.null created"
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "type": "string", 
                                            "description": "Status is *success*"
                                        }, 
                                        "message": {
                                            "type": "string", 
                                            "description": "Message information"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "User is created but not activated. An activation code is sent to user's email address."
                    }, 
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }, 
                        "description": "User already exist but is not activated"
                    }, 
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }, 
                        "description": "User already exist"
                    }, 
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }, 
                        "description": "Bad request"
                    }
                }, 
                "tags": [
                    "User"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "exactCount": true, 
                                    "totalResults": 2, 
                                    "profiles": [
                                        {
                                            "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400", 
                                            "followed": false, 
                                            "name": "jrom", 
                                            "firstname": "J\u00e9r\u00f4me", 
                                            "bio": "Working on new features for the next major release of SnapPlanet", 
                                            "lastname": "Gasperi", 
                                            "followings": 144, 
                                            "topics": "earth,fires,geology,glaciology,volcanism", 
                                            "followme": false, 
                                            "followers": 185, 
                                            "groups": [
                                                1
                                            ], 
                                            "id": "1356771884787565573", 
                                            "registrationdate": "2016-10-08T22:50:34.187217Z"
                                        }, 
                                        {
                                            "picture": "https://graph.facebook.com/410860042635946/picture?type=large", 
                                            "followed": false, 
                                            "name": "Sergio", 
                                            "followings": 9, 
                                            "followme": false, 
                                            "followers": 16, 
                                            "groups": [
                                                "1"
                                            ], 
                                            "id": "1381434932013827205", 
                                            "registrationdate": "2016-10-08T22:50:34.187217Z"
                                        }
                                    ]
                                }, 
                                "schema": {
                                    "type": "object", 
                                    "properties": {
                                        "exactCount": {
                                            "type": "boolean", 
                                            "description": "True if totalResults is an exact count. False if estimated."
                                        }, 
                                        "totalResults": {
                                            "type": "integer", 
                                            "description": "Total number of user profiles"
                                        }, 
                                        "profiles": {
                                            "items": {
                                                "$ref": "#/components/schemas/UserDisplayProfile"
                                            }, 
                                            "type": "array", 
                                            "description": "Return users"
                                        }
                                    }
                                }
                            }
                        }, 
                        "description": "List of users profiles"
                    }, 
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }, 
                        "description": "Unauthorized"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "integer"
                        }, 
                        "description": "Return user profiles with identifier lower than *lt* - used for pagination", 
                        "style": "form", 
                        "name": "lt", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "List of comma separated user identifiers", 
                        "style": "form", 
                        "name": "in", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Return user profiles belonging to group identified by *groupid* ", 
                        "style": "form", 
                        "name": "groupid", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Filter by name, firstname or lastname", 
                        "style": "form", 
                        "name": "q", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "User"
                ], 
                "description": "Return the list of user's profiles ordered by descending user identifier. A maximum of 50 profiles are returned per page. The *lt* parameter should be used for pagination", 
                "summary": "Get users", 
                "security": [
                    {
                        "bearerAuth": [], 
                        "basicAuth": [], 
                        "queryAuth": []
                    }
                ], 
                "operationId": "UsersAPI::getUsersProfiles"
            }
        }
    }, 
    "tags": [
        {
            "name": "Collection", 
            "description": "A collection is a set of features. This set is usually homogeneous (e.g. *Sentinel-2 images*) but not necessary. A collection is defined by a *model* physically described within a dedicated class under $SRC/include/resto/Models. The purpose of the model class is to convert the input collection feature format (i.e. whatever) to the resto generic format (i.e. GeoJSON) described within the RestoModel class."
        }, 
        {
            "name": "Feature", 
            "description": "A feature is an application object that represents a physical entity e.g. a building, a river, a person, a coverage taken by a a satellite. Practically, a resto feature is defined by a set of metadata including a geographical location (i.e. a (Multi)Point, a (Multi)LineString or a (Multi)Polygon). A feature always belongs to one and only one collection."
        }, 
        {
            "name": "User", 
            "description": "Everything about user - profile, access rights, history, etc."
        }
    ], 
    "servers": [
        {
            "url": "http://127.0.0.1:5252", 
            "description": "resto localhost server"
        }
    ], 
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "scheme": "bearer", 
                "type": "http", 
                "description": "Access token in HTTP header as JWT or rJWT (_resto JWT_) - this is the default", 
                "bearerFormat": "JWT"
            }, 
            "basicAuth": {
                "scheme": "basic", 
                "type": "http", 
                "description": "Basic authentication in HTTP header - should be used first to get a valid rJWT token"
            }, 
            "queryAuth": {
                "in": "query", 
                "type": "apiKey", 
                "description": "Access token in query as preseance over token in HTTP header", 
                "name": "_bearer"
            }
        }, 
        "schemas": {
            "InputFeatureCollection": {
                "example": {
                    "type": "FeatureCollection", 
                    "features": [
                        {
                            "assets": {
                                "tileInfo": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/tileInfo.json", 
                                    "type": "application/json"
                                }, 
                                "productInfo": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/productInfo.json", 
                                    "type": "application/json"
                                }, 
                                "thumbnail": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/preview.jpg", 
                                    "type": "image/jpeg"
                                }, 
                                "metadata": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/metadata.xml", 
                                    "type": "text/xml"
                                }
                            }, 
                            "links": [
                                {
                                    "href": "http://127.0.0.1:5252/collections/S2/items/8030a391-4002-556f-929b-d7ff9dad6705?&lang=en", 
                                    "type": "application/json", 
                                    "rel": "self"
                                }, 
                                {
                                    "href": "http://127.0.0.1:5252/collections/S2?&lang=en", 
                                    "type": "application/json", 
                                    "rel": "collection", 
                                    "title": "S2"
                                }
                            ], 
                            "geometry": {
                                "type": "Polygon", 
                                "coordinates": [
                                    [
                                        [
                                            -48.619853, 
                                            75.657209
                                        ], 
                                        [
                                            -44.646424, 
                                            75.684397
                                        ], 
                                        [
                                            -44.660672, 
                                            75.069386
                                        ], 
                                        [
                                            -44.698432, 
                                            75.060518
                                        ], 
                                        [
                                            -45.489771, 
                                            74.830977
                                        ], 
                                        [
                                            -45.857954, 
                                            74.720238
                                        ], 
                                        [
                                            -45.921685, 
                                            74.698702
                                        ], 
                                        [
                                            -48.392706, 
                                            74.674979
                                        ], 
                                        [
                                            -48.619853, 
                                            75.657209
                                        ]
                                    ]
                                ]
                            }, 
                            "collection": "S2", 
                            "properties": {
                                "startDate": "2019-06-11T16:11:41.808000Z", 
                                "productIdentifier": "S2A_MSIL1C_20190611T160901_N0207_R140_T23XMD_20190611T193040", 
                                "datetime": "2019-06-11T16:11:41Z"
                            }, 
                            "stac_version": "0.8.0", 
                            "stac_extensions": [
                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                            ], 
                            "type": "Feature", 
                            "id": "8030a391-4002-556f-929b-d7ff9dad6705", 
                            "bbox": [
                                -48.6198530870596, 
                                74.6749788966259, 
                                -44.6464244356188, 
                                75.6843970710939
                            ]
                        }
                    ]
                }, 
                "required": [
                    "type", 
                    "features"
                ], 
                "type": "object", 
                "description": "Feature collection", 
                "properties": {
                    "type": {
                        "enum": [
                            "FeatureCollection"
                        ], 
                        "type": "string", 
                        "description": "Always set to *FeatureCollection*"
                    }, 
                    "features": {
                        "items": {
                            "$ref": "#/components/schemas/InputFeature"
                        }, 
                        "type": "array", 
                        "description": "Array of features"
                    }
                }
            }, 
            "ForbiddenError": {
                "required": [
                    "ErrorCode", 
                    "ErrorMessage"
                ], 
                "type": "object", 
                "properties": {
                    "ErrorCode": {
                        "type": "integer", 
                        "description": "HTTP status code"
                    }, 
                    "ErrorMessage": {
                        "type": "string", 
                        "description": "Error message"
                    }
                }, 
                "example": {
                    "ErrorCode": 403, 
                    "ErrorMessage": "Forbidden"
                }
            }, 
            "OutputCollection": {
                "required": [
                    "id", 
                    "type", 
                    "title", 
                    "description", 
                    "license", 
                    "extent", 
                    "links"
                ], 
                "type": "object", 
                "properties": {
                    "description": {
                        "type": "string", 
                        "description": "Detailed multi-line description to fully explain the collection. CommonMark 0.28 syntax MAY be used for rich text representation."
                    }, 
                    "license": {
                        "enum": [
                            "proprietary", 
                            "various", 
                            "<license id>"
                        ], 
                        "type": "string", 
                        "description": "License for this collection as a SPDX License identifier or expression. Alternatively, use proprietary if the license is not on the SPDX license list or various if multiple licenses apply. In these two cases links to the license texts SHOULD be added, see the license link relation type."
                    }, 
                    "title": {
                        "type": "string", 
                        "description": "A short descriptive one-line title for the collection."
                    }, 
                    "summaries": {
                        "type": "object", 
                        "description": "resto collection"
                    }, 
                    "providers": {
                        "items": {
                            "$ref": "#/components/schemas/Provider"
                        }, 
                        "type": "array", 
                        "description": "A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list"
                    }, 
                    "links": {
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }, 
                        "type": "array", 
                        "description": "resto collection"
                    }, 
                    "resto:info": {
                        "type": "object", 
                        "description": "resto additional information"
                    }, 
                    "stac_version": {
                        "type": "string", 
                        "description": "[EXTENSION][STAC] The STAC version the Collection implements"
                    }, 
                    "stac_extensions": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array", 
                        "description": "[EXTENSION][STAC] A list of extensions the Collection implements."
                    }, 
                    "extent": {
                        "type": "object", 
                        "$ref": "#/components/schemas/Extent"
                    }, 
                    "keywords": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array", 
                        "description": "List of keywords describing the collection."
                    }, 
                    "type": {
                        "enum": [
                            "Collection"
                        ], 
                        "type": "string", 
                        "description": "[EXTENSION][STAC] Always set to *Collection*"
                    }, 
                    "id": {
                        "type": "string", 
                        "description": "Collection identifier. It must be an unique alphanumeric string containing only [a-zA-Z0-9\\-_]."
                    }
                }, 
                "example": {
                    "description": "The SENTINEL-2 mission is a land monitoring constellation of two satellites each equipped with a MSI (Multispectral Imager) instrument covering 13 spectral bands providing high resolution optical imagery (i.e., 10m, 20m, 60 m) every 10 days with one satellite and 5 days with two satellites", 
                    "license": "proprietary", 
                    "title": "Sentinel-2", 
                    "providers": [
                        {
                            "url": "https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi", 
                            "name": "European Union/ESA/Copernicus", 
                            "roles": [
                                "producer", 
                                "licensor"
                            ]
                        }
                    ], 
                    "links": [
                        {
                            "href": "http://127.0.0.1:5252/collections/S2.json?&_pretty=1", 
                            "type": "application/json", 
                            "rel": "self"
                        }, 
                        {
                            "href": "http://127.0.0.1:5252", 
                            "type": "application/json", 
                            "rel": "root"
                        }, 
                        {
                            "href": "https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf", 
                            "rel": "license", 
                            "title": "Legal notice on the use of Copernicus Sentinel Data and Service Information"
                        }
                    ], 
                    "resto:info": {
                        "lineage": [
                            "DefaultModel", 
                            "LandCoverModel", 
                            "SatelliteModel", 
                            "OpticalModel"
                        ], 
                        "osDescription": {
                            "Attribution": "European Union/ESA/Copernicus", 
                            "Description": "The SENTINEL-2 mission is a land monitoring constellation of two satellites each equipped with a MSI (Multispectral Imager) instrument covering 13 spectral bands providing high resolution optical imagery (i.e., 10m, 20m, 60 m) every 10 days with one satellite and 5 days with two satellites", 
                            "Tags": "copernicus esa eu msi radiance sentinel sentinel2", 
                            "Contact": "jrom@snapplanet.io", 
                            "LongName": "Level 1C Sentinel-2 images", 
                            "Query": "Toulouse", 
                            "ShortName": "Sentinel-2", 
                            "Developer": "J\\u00e9r\\u00f4me Gasperi"
                        }, 
                        "model": "OpticalModel", 
                        "owner": "203883411255198721"
                    }, 
                    "stac_version": "0.8.0", 
                    "stac_extensions": [
                        "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                    ], 
                    "extent": {
                        "temporal": {
                            "trs": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian", 
                            "interval": [
                                [
                                    "2019-06-11T16:11:41.808000Z", 
                                    "2019-06-11T16:11:41.808000Z"
                                ]
                            ]
                        }, 
                        "spatial": {
                            "crs": "http://www.opengis.net/def/crs/OGC/1.3/CRS84", 
                            "bbox": [
                                [
                                    -48.6198530870596, 
                                    74.6749788966259, 
                                    -44.6464244356188, 
                                    75.6843970710939
                                ]
                            ]
                        }
                    }, 
                    "keywords": [
                        "copernicus", 
                        "esa", 
                        "eu", 
                        "msi", 
                        "radiance", 
                        "sentinel", 
                        "sentinel2"
                    ], 
                    "summaries": {
                        "eo:bands": [
                            {
                                "common_name": "coastal", 
                                "center_wavelength": 4.439, 
                                "name": "B1", 
                                "gsd": 60
                            }, 
                            {
                                "common_name": "blue", 
                                "center_wavelength": 4.966, 
                                "name": "B2", 
                                "gsd": 10
                            }, 
                            {
                                "common_name": "green", 
                                "center_wavelength": 5.6, 
                                "name": "B3", 
                                "gsd": 10
                            }, 
                            {
                                "common_name": "red", 
                                "center_wavelength": 6.645, 
                                "name": "B4", 
                                "gsd": 10
                            }, 
                            {
                                "center_wavelength": 7.039, 
                                "name": "B5", 
                                "gsd": 20
                            }, 
                            {
                                "center_wavelength": 7.402, 
                                "name": "B6", 
                                "gsd": 20
                            }, 
                            {
                                "center_wavelength": 7.825, 
                                "name": "B7", 
                                "gsd": 20
                            }, 
                            {
                                "common_name": "nir", 
                                "center_wavelength": 8.351, 
                                "name": "B8", 
                                "gsd": 10
                            }, 
                            {
                                "center_wavelength": 8.648, 
                                "name": "B8A", 
                                "gsd": 20
                            }, 
                            {
                                "center_wavelength": 9.45, 
                                "name": "B9", 
                                "gsd": 60
                            }, 
                            {
                                "center_wavelength": 1.3735, 
                                "name": "B10", 
                                "gsd": 60
                            }, 
                            {
                                "common_name": "swir16", 
                                "center_wavelength": 1.6137, 
                                "name": "B11", 
                                "gsd": 20
                            }, 
                            {
                                "common_name": "swir22", 
                                "center_wavelength": 2.2024, 
                                "name": "B12", 
                                "gsd": 20
                            }
                        ], 
                        "datetime": {
                            "minimum": "2019-06-11T16:11:41.808000Z", 
                            "maximum": "2019-06-11T16:11:41.808000Z"
                        }, 
                        "eo:platform": [
                            "S2A"
                        ], 
                        "processingLevel": [
                            "LEVEL1C"
                        ], 
                        "productType": [
                            "REFLECTANCE"
                        ], 
                        "eo:instrument": [
                            "MSI"
                        ]
                    }, 
                    "id": "S2"
                }
            }, 
            "UserDisplayProfile": {
                "required": [
                    "id", 
                    "picture", 
                    "groups", 
                    "name", 
                    "followers", 
                    "followings"
                ], 
                "type": "object", 
                "properties": {
                    "picture": {
                        "type": "string", 
                        "description": "An http(s) url to the user's avatar picture"
                    }, 
                    "followed": {
                        "type": "boolean", 
                        "description": "True if user is followed by requesting user"
                    }, 
                    "name": {
                        "type": "string", 
                        "description": "User display name"
                    }, 
                    "firstname": {
                        "type": "string", 
                        "description": "User firstname"
                    }, 
                    "bio": {
                        "type": "string", 
                        "description": "User biography"
                    }, 
                    "lastname": {
                        "type": "string", 
                        "description": "User lastname"
                    }, 
                    "followings": {
                        "type": "integer", 
                        "description": "Number of user's followings"
                    }, 
                    "topics": {
                        "type": "string", 
                        "description": "Comma separated list of user's topics of interest"
                    }, 
                    "followme": {
                        "type": "string", 
                        "description": "True if user follows requesting user"
                    }, 
                    "followers": {
                        "type": "integer", 
                        "description": "Number of user's followers"
                    }, 
                    "groups": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array", 
                        "description": "Array of group identifiers"
                    }, 
                    "id": {
                        "type": "string", 
                        "description": "Unique user identifier. Identifier is related to user's registration date i.e. the greatest the identifier value, the most recently registered the user is"
                    }, 
                    "registrationdate": {
                        "type": "string", 
                        "description": "User registration date"
                    }
                }, 
                "example": {
                    "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400", 
                    "followed": false, 
                    "name": "jrom", 
                    "firstname": "J\u00e9r\u00f4me", 
                    "bio": "Working on new features for the next major release of SnapPlanet", 
                    "lastname": "Gasperi", 
                    "followings": 144, 
                    "topics": "earth,fires,geology,glaciology,volcanism", 
                    "followme": false, 
                    "followers": 185, 
                    "groups": [
                        "1"
                    ], 
                    "id": "1356771884787565573", 
                    "registrationdate": "2016-10-08T22:50:34.187217Z"
                }
            }, 
            "BadRequestError": {
                "required": [
                    "ErrorCode", 
                    "ErrorMessage"
                ], 
                "type": "object", 
                "properties": {
                    "ErrorCode": {
                        "type": "integer", 
                        "description": "HTTP status code"
                    }, 
                    "ErrorMessage": {
                        "type": "string", 
                        "description": "Error message"
                    }
                }, 
                "example": {
                    "ErrorCode": 400, 
                    "ErrorMessage": "Bad request"
                }
            }, 
            "InputCollection": {
                "required": [
                    "id", 
                    "model", 
                    "osDescription"
                ], 
                "type": "object", 
                "properties": {
                    "version": {
                        "type": "string", 
                        "description": "Version of the collection."
                    }, 
                    "links": {
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }, 
                        "type": "array", 
                        "description": "resto collection"
                    }, 
                    "rights": {
                        "type": "object", 
                        "description": "Default collection rights settings", 
                        "properties": {
                            "download": {
                                "enum": [
                                    0, 
                                    1
                                ], 
                                "type": "integer", 
                                "description": "Feature download rights (1 can be downloaded; 0 cannot be downloaded)"
                            }, 
                            "visualize": {
                                "type": "integer", 
                                "description": "Features visualization rights (1 can be visualized; 0 cannot be visualized)"
                            }
                        }
                    }, 
                    "providers": {
                        "items": {
                            "$ref": "#/components/schemas/Provider"
                        }, 
                        "type": "array", 
                        "description": "A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list"
                    }, 
                    "visibility": {
                        "description": "Visibility of this collection. Collections with visibility 1 are visible to all users."
                    }, 
                    "summaries": {
                        "type": "object", 
                        "description": "resto collection"
                    }, 
                    "licenseId": {
                        "type": "string", 
                        "description": "License for this collection as a SPDX License identifier. Alternatively, use proprietary if the license is not on the SPDX license list or various if multiple licenses apply. In these two cases links to the license texts SHOULD be added, see the license link relation type."
                    }, 
                    "keywords": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array", 
                        "description": "List of keywords describing the collection."
                    }, 
                    "osDescription": {
                        "required": [
                            "en"
                        ], 
                        "type": "object", 
                        "description": "resto collection", 
                        "properties": {
                            "fr": {
                                "description": "OpenSearch description in French", 
                                "$ref": "#/components/schemas/OpenSearchDescription"
                            }, 
                            "en": {
                                "description": "OpenSearch description in English", 
                                "$ref": "#/components/schemas/OpenSearchDescription"
                            }
                        }
                    }, 
                    "model": {
                        "type": "string", 
                        "description": "[For developper] Name of the collection model class under $SRC/include/resto/Models."
                    }, 
                    "id": {
                        "type": "string", 
                        "description": "Collection identifier. It must be an unique alphanumeric string containing only [a-zA-Z0-9\\-_]."
                    }, 
                    "assets": {
                        "items": {
                            "$ref": "#/components/schemas/Asset"
                        }, 
                        "type": "array", 
                        "description": "resto collection"
                    }
                }, 
                "example": {
                    "version": "1.0", 
                    "links": [
                        {
                            "href": "https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf", 
                            "rel": "license", 
                            "title": "Legal notice on the use of Copernicus Sentinel Data and Service Information"
                        }
                    ], 
                    "rights": {
                        "download": 1, 
                        "visualize": 1
                    }, 
                    "providers": [
                        {
                            "url": "https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi", 
                            "name": "European Union/ESA/Copernicus", 
                            "roles": [
                                "producer", 
                                "licensor"
                            ]
                        }
                    ], 
                    "visibility": 1, 
                    "summaries": {
                        "eo:bands": [
                            {
                                "common_name": "coastal", 
                                "center_wavelength": 4.439, 
                                "name": "B1", 
                                "gsd": 60
                            }, 
                            {
                                "common_name": "blue", 
                                "center_wavelength": 4.966, 
                                "name": "B2", 
                                "gsd": 10
                            }, 
                            {
                                "common_name": "green", 
                                "center_wavelength": 5.6, 
                                "name": "B3", 
                                "gsd": 10
                            }, 
                            {
                                "common_name": "red", 
                                "center_wavelength": 6.645, 
                                "name": "B4", 
                                "gsd": 10
                            }, 
                            {
                                "center_wavelength": 7.039, 
                                "name": "B5", 
                                "gsd": 20
                            }, 
                            {
                                "center_wavelength": 7.402, 
                                "name": "B6", 
                                "gsd": 20
                            }, 
                            {
                                "center_wavelength": 7.825, 
                                "name": "B7", 
                                "gsd": 20
                            }, 
                            {
                                "common_name": "nir", 
                                "center_wavelength": 8.351, 
                                "name": "B8", 
                                "gsd": 10
                            }, 
                            {
                                "center_wavelength": 8.648, 
                                "name": "B8A", 
                                "gsd": 20
                            }, 
                            {
                                "center_wavelength": 9.45, 
                                "name": "B9", 
                                "gsd": 60
                            }, 
                            {
                                "center_wavelength": 1.3735, 
                                "name": "B10", 
                                "gsd": 60
                            }, 
                            {
                                "common_name": "swir16", 
                                "center_wavelength": 1.6137, 
                                "name": "B11", 
                                "gsd": 20
                            }, 
                            {
                                "common_name": "swir22", 
                                "center_wavelength": 2.2024, 
                                "name": "B12", 
                                "gsd": 20
                            }
                        ]
                    }, 
                    "licenseId": "proprietary", 
                    "osDescription": {
                        "fr": {
                            "Attribution": "European Union/ESA/Copernicus", 
                            "Description": "La mission SENTINEL-2 est constitu\u00e9e de deux satellites d'imagerie optique \u00e9quip\u00e9s d\u2019un imageur multispectral (MSI) en 13 bandes spectrales avec des r\u00e9solutions de 10, 20 et 60 m\u00e8tres et d'une fauch\u00e9e unique de 290 km de large. La capacit\u00e9 d'observation des deux satellites permet de surveiller l'int\u00e9gralit\u00e9 des terres \u00e9merg\u00e9es du globe tous les 5 jours", 
                            "Tags": "copernicus esa eu msi radiance sentinel sentinel2", 
                            "Contact": "jrom@snapplanet.io", 
                            "LongName": "Images Sentinel-2 Niveau 1C", 
                            "Query": "Toulouse", 
                            "ShortName": "Sentinel-2", 
                            "Developer": "J\u00e9r\u00f4me Gasperi"
                        }, 
                        "en": {
                            "Attribution": "European Union/ESA/Copernicus", 
                            "Description": "The SENTINEL-2 mission is a land monitoring constellation of two satellites each equipped with a MSI (Multispectral Imager) instrument covering 13 spectral bands providing high resolution optical imagery (i.e., 10m, 20m, 60 m) every 10 days with one satellite and 5 days with two satellites", 
                            "Tags": "copernicus esa eu msi radiance sentinel sentinel2", 
                            "Contact": "jrom@snapplanet.io", 
                            "LongName": "Level 1C Sentinel-2 images", 
                            "Query": "Toulouse", 
                            "ShortName": "Sentinel-2", 
                            "Developer": "J\u00e9r\u00f4me Gasperi"
                        }
                    }, 
                    "model": "OpticalModel", 
                    "id": "S2"
                }
            }, 
            "NotFoundError": {
                "required": [
                    "ErrorCode", 
                    "ErrorMessage"
                ], 
                "type": "object", 
                "properties": {
                    "ErrorCode": {
                        "type": "integer", 
                        "description": "HTTP status code"
                    }, 
                    "ErrorMessage": {
                        "type": "string", 
                        "description": "Error message"
                    }
                }, 
                "example": {
                    "ErrorCode": 404, 
                    "ErrorMessage": "Not Found"
                }
            }, 
            "OpenSearchDescription": {
                "example": {
                    "Attribution": "SnapPlanet - Copyright 2016, All Rights Reserved", 
                    "Description": "Sentinel-2 tiles", 
                    "Tags": "s2 sentinel2", 
                    "Contact": "jrom@snapplanet.io", 
                    "LongName": "Sentinel-2", 
                    "Query": "Toulouse", 
                    "ShortName": "S2", 
                    "Developer": "J\u00e9r\u00f4me Gasperi"
                }, 
                "required": [
                    "ShortName", 
                    "Description"
                ], 
                "type": "object", 
                "description": "OpenSearch description of the search engine attached to the collection", 
                "properties": {
                    "Attribution": {
                        "type": "string", 
                        "description": "Contains a list of all sources or entities that should be credited for the content contained in the search feed"
                    }, 
                    "Description": {
                        "type": "string", 
                        "description": "Contains a human-readable text description of the collection search engine"
                    }, 
                    "Tags": {
                        "type": "string", 
                        "description": "Contains a set of words that are used as keywords to identify and categorize this search content. Tags must be a single word and are delimited by the space character"
                    }, 
                    "Contact": {
                        "type": "string", 
                        "description": "Contains an email address at which the maintainer of the description document can be reached"
                    }, 
                    "LongName": {
                        "type": "string", 
                        "description": "Contains an extended human-readable title that identifies this search engine"
                    }, 
                    "Query": {
                        "type": "string", 
                        "description": "Defines a search query that can be performed by search clients. Please see the OpenSearch Query element specification for more information"
                    }, 
                    "ShortName": {
                        "type": "string", 
                        "description": "Contains a brief human-readable title that identifies the search engine"
                    }, 
                    "Developer": {
                        "type": "string", 
                        "description": "Contains the human-readable name or identifier of the creator or maintainer of the description document"
                    }
                }
            }, 
            "ConflictError": {
                "required": [
                    "ErrorCode", 
                    "ErrorMessage"
                ], 
                "type": "object", 
                "properties": {
                    "ErrorCode": {
                        "type": "integer", 
                        "description": "HTTP status code"
                    }, 
                    "ErrorMessage": {
                        "type": "string", 
                        "description": "Error message"
                    }
                }, 
                "example": {
                    "ErrorCode": 409, 
                    "ErrorMessage": "Conflict"
                }
            }, 
            "Statistics": {
                "example": {
                    "count": 5322724, 
                    "facets": {
                        "instrument": {
                            "MSI": 5322722, 
                            "HRS": 2
                        }, 
                        "productType": {
                            "REFLECTANCE": 5322722, 
                            "PX": 2
                        }, 
                        "continent": {
                            "Europe": 1992756, 
                            "Oceania": 218789, 
                            "Seven seas (open ocean)": 9481, 
                            "Africa": 671538, 
                            "South America": 313983, 
                            "Asia": 747847, 
                            "North America": 1012027, 
                            "Antarctica": 106337
                        }, 
                        "processingLevel": {
                            "LEVEL1C": 5322722
                        }, 
                        "platform": {
                            "S2B": 1976403, 
                            "SPOT6": 1, 
                            "S2A": 3346319
                        }
                    }
                }, 
                "required": [
                    "count", 
                    "facets"
                ], 
                "type": "object", 
                "description": "Collection facets statistics", 
                "properties": {
                    "count": {
                        "type": "integer", 
                        "description": "Total number of features in the collection"
                    }, 
                    "facets": {
                        "description": "Statistics per facets"
                    }
                }
            }, 
            "Link": {
                "example": {
                    "href": "http://127.0.0.1:5252/collections/S2.json?&_pretty=1", 
                    "type": "application/json", 
                    "rel": "self"
                }, 
                "required": [
                    "rel", 
                    "href"
                ], 
                "type": "object", 
                "description": "Link", 
                "properties": {
                    "href": {
                        "type": "string", 
                        "description": "Url to the resource"
                    }, 
                    "type": {
                        "type": "string", 
                        "description": "Mimetype of the resource"
                    }, 
                    "rel": {
                        "type": "string", 
                        "description": "Relationship between the feature and the linked document/resource"
                    }, 
                    "title": {
                        "type": "string", 
                        "description": "Title of the resource"
                    }
                }
            }, 
            "Asset": {
                "example": {
                    "href": "https://landsat-pds.s3.amazonaws.com/c1/L8/171/002/LC08_L1TP_171002_20200616_20200616_01_RT/LC08_L1TP_171002_20200616_20200616_01_RT_B1.TIF", 
                    "type": "image/tiff; application=geotiff; profile=cloud-optimized", 
                    "eo:bands": [
                        0
                    ], 
                    "roles": [
                        "data"
                    ]
                }, 
                "required": [
                    "rel", 
                    "href"
                ], 
                "type": "object", 
                "description": "Asset links", 
                "properties": {
                    "href": {
                        "type": "string", 
                        "description": "Url to the resource"
                    }, 
                    "type": {
                        "type": "string", 
                        "description": "Mimetype of the resource"
                    }, 
                    "roles": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array", 
                        "description": "Asset roles"
                    }, 
                    "rel": {
                        "type": "string", 
                        "description": "Relationship between the feature and the linked document/resource"
                    }, 
                    "title": {
                        "type": "string", 
                        "description": "Title of the resource"
                    }
                }
            }, 
            "Extent": {
                "example": {
                    "temporal": {
                        "trs": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian", 
                        "interval": [
                            [
                                "2019-06-11T16:11:41.808000Z", 
                                "2019-06-11T16:11:41.808000Z"
                            ]
                        ]
                    }, 
                    "spatial": {
                        "crs": "http://www.opengis.net/def/crs/OGC/1.3/CRS84", 
                        "bbox": [
                            [
                                -48.6198530870596, 
                                74.6749788966259, 
                                -44.6464244356188, 
                                75.6843970710939
                            ]
                        ]
                    }
                }, 
                "required": [
                    "spatial", 
                    "temporal"
                ], 
                "type": "object", 
                "description": "Spatio-temporal extents of the Collection", 
                "properties": {
                    "temporal": {
                        "type": "object", 
                        "description": "The temporal extents of the Collection"
                    }, 
                    "spatial": {
                        "type": "object", 
                        "description": "The spatial extents of the Collection"
                    }
                }
            }, 
            "Provider": {
                "example": [
                    {
                        "url": "https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi", 
                        "name": "European Union/ESA/Copernicus", 
                        "roles": [
                            "producer", 
                            "licensor"
                        ]
                    }
                ], 
                "required": [
                    "name"
                ], 
                "type": "object", 
                "description": "A provider is any of the organizations that captured or processed the content of the collection and therefore influenced the data offered by this collection", 
                "properties": {
                    "url": {
                        "type": "string", 
                        "description": "Homepage on which the provider describes the dataset and publishes contact information."
                    }, 
                    "name": {
                        "type": "string", 
                        "description": "The name of the organization or the individual"
                    }, 
                    "roles": {
                        "items": {
                            "enum": [
                                "licensor", 
                                "producer", 
                                "processor", 
                                "host"
                            ], 
                            "type": "string"
                        }, 
                        "type": "array", 
                        "description": "Roles of the provider."
                    }, 
                    "description": {
                        "type": "string", 
                        "description": "Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information. CommonMark 0.28 syntax MAY be used for rich text representation"
                    }
                }
            }, 
            "UnauthorizedError": {
                "required": [
                    "ErrorCode", 
                    "ErrorMessage"
                ], 
                "type": "object", 
                "properties": {
                    "ErrorCode": {
                        "type": "integer", 
                        "description": "HTTP status code"
                    }, 
                    "ErrorMessage": {
                        "type": "string", 
                        "description": "Error message"
                    }
                }, 
                "example": {
                    "ErrorCode": 401, 
                    "ErrorMessage": "Unauthorized"
                }
            }, 
            "OutputFeature": {
                "example": {
                    "assets": {
                        "thumbnail": {
                            "role": "thumbnail", 
                            "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/28/H/CE/2020/6/21/0/preview.jpg", 
                            "type": "image/jpeg"
                        }
                    }, 
                    "links": [
                        {
                            "href": "https://tamn.snapplanet.io/collections/S2/items/af9f811b-f6b7-5dfc-ac43-c1d200a79088", 
                            "type": "application/geo+json", 
                            "rel": "self"
                        }
                    ], 
                    "geometry": {
                        "type": "Polygon", 
                        "coordinates": [
                            [
                                [
                                    -16.34433, 
                                    -36.136821
                                ], 
                                [
                                    -16.002576, 
                                    -36.14017
                                ], 
                                [
                                    -16.003437, 
                                    -36.207726
                                ], 
                                [
                                    -16.003437, 
                                    -36.207726
                                ], 
                                [
                                    -16.073904, 
                                    -36.193064
                                ], 
                                [
                                    -16.079613, 
                                    -36.194838
                                ], 
                                [
                                    -16.343729, 
                                    -36.140707
                                ], 
                                [
                                    -16.343453, 
                                    -36.137129
                                ], 
                                [
                                    -16.34433, 
                                    -36.136821
                                ]
                            ]
                        ]
                    }, 
                    "collection": "S2", 
                    "properties": {
                        "start_datetime": "2020-06-21T11:11:28.371000Z", 
                        "updated": "2018-09-13T12:52:25.971969Z", 
                        "liked": false, 
                        "hashtags": [
                            "ocean:SouthAtlanticOcean:3358844", 
                            "landcover:water", 
                            "location:southern", 
                            "season:winter", 
                            "collection:S2", 
                            "productType:REFLECTANCE", 
                            "processingLevel:LEVEL1C", 
                            "platform:S2B", 
                            "instrument:MSI", 
                            "year:2020", 
                            "month:06", 
                            "day:21"
                        ], 
                        "productIdentifier": "S2B_MSIL1C_20200621T111039_N0209_R008_T28HCE_20200621T132349", 
                        "comments": 0, 
                        "datetime": "2020-06-21T11:11:28.371000Z", 
                        "centroid": {
                            "type": "Point", 
                            "coordinates": [
                                70.513407, 
                                23.006623
                            ]
                        }, 
                        "end_datetime": "2020-06-21T11:11:28.371000Z", 
                        "published": "2018-09-13T12:52:25.971969Z", 
                        "likes": 0
                    }, 
                    "type": "Feature", 
                    "id": "b9eeaf68-5127-53e5-97ff-ddf44984ef56"
                }, 
                "required": [
                    "type", 
                    "id", 
                    "geometry", 
                    "properties", 
                    "collection", 
                    "links", 
                    "assets"
                ], 
                "type": "object", 
                "description": "Feature returned by resto", 
                "properties": {
                    "assets": {
                        "type": "object", 
                        "description": "RESTo Feature"
                    }, 
                    "links": {
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }, 
                        "type": "array", 
                        "description": "RESTo Feature"
                    }, 
                    "geometry": {
                        "required": [
                            "type", 
                            "geometry"
                        ], 
                        "type": "object", 
                        "description": "Geometry definition", 
                        "properties": {
                            "type": {
                                "enum": [
                                    "Point", 
                                    "MultiPoint", 
                                    "LineString", 
                                    "MultiLineString", 
                                    "Polygon", 
                                    "MultiPolygon", 
                                    "GeometryCollection"
                                ], 
                                "type": "string", 
                                "description": "Geometry type following GeoJSON specification"
                            }, 
                            "coordinates": {
                                "items": {
                                    "type": "number"
                                }, 
                                "type": "array", 
                                "description": "Geometry vertices following GeoJSON specification"
                            }
                        }
                    }, 
                    "collection": {
                        "type": "string", 
                        "description": "Collection identifier"
                    }, 
                    "properties": {
                        "type": "object", 
                        "description": "Feature properties mainly based on *[OGC-13-026r8] OGC OpenSearch Extension for Earth Observation*. Only non null properties are returned", 
                        "properties": {
                            "status": {
                                "type": "integer", 
                                "description": "[Unused]"
                            }, 
                            "liked": {
                                "type": "boolean", 
                                "description": "True if the user that requests the feature likes it"
                            }, 
                            "description": {
                                "type": "string", 
                                "description": "A descriptipon of the feature"
                            }, 
                            "title": {
                                "type": "string", 
                                "description": "A name given to the feature"
                            }, 
                            "hashtags": {
                                "items": {
                                    "type": "string"
                                }, 
                                "type": "array", 
                                "description": "Array of hashtags attached to the feature"
                            }, 
                            "comments": {
                                "type": "integer", 
                                "description": "Number of comments on this feature"
                            }, 
                            "datetime": {
                                "type": "string", 
                                "description": "Start/end of feature life (e.g. start of acquisition for a satellite imagery) (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ/YYYY-MM-DD-THH:MM:SSZ)"
                            }, 
                            "centroid": {
                                "type": "object", 
                                "description": "Centroid of the feature", 
                                "properties": {
                                    "type": {
                                        "type": "string", 
                                        "description": "Always set to *Point*"
                                    }, 
                                    "coordinates": {
                                        "items": {
                                            "type": "number"
                                        }, 
                                        "type": "array", 
                                        "description": "Coordinates expressed in [longitude, latitude]"
                                    }
                                }
                            }, 
                            "likes": {
                                "type": "integer", 
                                "description": "Number of likes for this feature"
                            }, 
                            "published": {
                                "type": "string", 
                                "description": "The date when the feature metadata was published (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ)"
                            }, 
                            "owner": {
                                "type": "string", 
                                "description": "Owner of the feature i.e. user that created it"
                            }, 
                            "udpated": {
                                "type": "string", 
                                "description": "The date when the feature metadata was updated (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ)"
                            }
                        }
                    }, 
                    "type": {
                        "enum": [
                            "Feature"
                        ], 
                        "type": "string", 
                        "description": "Always set to *feature*"
                    }, 
                    "id": {
                        "type": "string", 
                        "description": "Feature identifier"
                    }
                }
            }, 
            "RestoFeatureCollection": {
                "example": {
                    "context": {
                        "exactCount": false, 
                        "returned": 20, 
                        "startIndex": 1, 
                        "limit": 20, 
                        "query": {
                            "inputFilters": []
                        }, 
                        "matched": 11345
                    }, 
                    "type": "FeatureCollection", 
                    "features": [
                        {
                            "assets": {
                                "tileInfo": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/tileInfo.json", 
                                    "type": "application/json"
                                }, 
                                "productInfo": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/productInfo.json", 
                                    "type": "application/json"
                                }, 
                                "thumbnail": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/preview.jpg", 
                                    "type": "image/jpeg"
                                }, 
                                "metadata": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/metadata.xml", 
                                    "type": "text/xml"
                                }
                            }, 
                            "links": [
                                {
                                    "href": "http://127.0.0.1:5252/collections/S2/items/8030a391-4002-556f-929b-d7ff9dad6705?&lang=en", 
                                    "type": "application/json", 
                                    "rel": "self"
                                }, 
                                {
                                    "href": "http://127.0.0.1:5252/collections/S2?&lang=en", 
                                    "type": "application/json", 
                                    "rel": "collection", 
                                    "title": "S2"
                                }
                            ], 
                            "geometry": {
                                "type": "Polygon", 
                                "coordinates": [
                                    [
                                        [
                                            -48.619853, 
                                            75.657209
                                        ], 
                                        [
                                            -44.646424, 
                                            75.684397
                                        ], 
                                        [
                                            -44.660672, 
                                            75.069386
                                        ], 
                                        [
                                            -44.698432, 
                                            75.060518
                                        ], 
                                        [
                                            -45.489771, 
                                            74.830977
                                        ], 
                                        [
                                            -45.857954, 
                                            74.720238
                                        ], 
                                        [
                                            -45.921685, 
                                            74.698702
                                        ], 
                                        [
                                            -48.392706, 
                                            74.674979
                                        ], 
                                        [
                                            -48.619853, 
                                            75.657209
                                        ]
                                    ]
                                ]
                            }, 
                            "collection": "S2", 
                            "properties": {
                                "startDate": "2019-06-11T16:11:41.808000Z", 
                                "productIdentifier": "S2A_MSIL1C_20190611T160901_N0207_R140_T23XMD_20190611T193040", 
                                "datetime": "2019-06-11T16:11:41Z"
                            }, 
                            "stac_version": "0.8.0", 
                            "stac_extensions": [
                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                            ], 
                            "type": "Feature", 
                            "id": "8030a391-4002-556f-929b-d7ff9dad6705", 
                            "bbox": [
                                -48.6198530870596, 
                                74.6749788966259, 
                                -44.6464244356188, 
                                75.6843970710939
                            ]
                        }
                    ], 
                    "links": [
                        {
                            "href": "http://127.0.0.1:5252/stac/search.json?", 
                            "type": "application/json", 
                            "rel": "self"
                        }, 
                        {
                            "href": "http://127.0.0.1:5252/services/osdd", 
                            "type": "application/opensearchdescription+xml", 
                            "rel": "search"
                        }, 
                        {
                            "href": "http://127.0.0.1:5252/stac/search.json?next=204449069316703379", 
                            "type": "application/json", 
                            "rel": "next"
                        }
                    ], 
                    "id": "20ac2fc6-daee-5621-bca4-d88c0bb19da1"
                }, 
                "required": [
                    "type", 
                    "links", 
                    "features", 
                    "context"
                ], 
                "type": "object", 
                "description": "Feature collection", 
                "properties": {
                    "context": {
                        "items": {
                            "type": "object", 
                            "properties": {
                                "exactCount": {
                                    "type": "boolean", 
                                    "description": "True if *matched* is exact - false means that it is estimated"
                                }, 
                                "returned": {
                                    "type": "integer", 
                                    "description": "The count of results returned by this response. equal to the cardinality of features array"
                                }, 
                                "startIndex": {
                                    "type": "integer", 
                                    "description": "Start index for the search (cf. pagination)"
                                }, 
                                "limit": {
                                    "type": "integer", 
                                    "description": "The maximum number of results to which the result was limited"
                                }, 
                                "query": {
                                    "type": "object", 
                                    "description": "Query details"
                                }, 
                                "matched": {
                                    "type": "integer", 
                                    "description": "The count of total number of results that match for this query, possibly estimated"
                                }
                            }
                        }, 
                        "required": [
                            "returned"
                        ], 
                        "description": "Information on search query"
                    }, 
                    "type": {
                        "enum": [
                            "FeatureCollection"
                        ], 
                        "type": "string", 
                        "description": "Always set to *FeatureCollection*"
                    }, 
                    "features": {
                        "items": {
                            "$ref": "#/components/schemas/OutputFeature"
                        }, 
                        "type": "array", 
                        "description": "Array of features"
                    }, 
                    "links": {
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }, 
                        "type": "array", 
                        "description": "RESTo FeatureCollection"
                    }, 
                    "id": {
                        "type": "string", 
                        "description": "FeatureCollection unique identifier (uuid)"
                    }
                }
            }, 
            "InputFeature": {
                "example": {
                    "geometry": {
                        "type": "Polygon", 
                        "coordinates": [
                            [
                                [
                                    -16.34433, 
                                    -36.136821
                                ], 
                                [
                                    -16.002576, 
                                    -36.14017
                                ], 
                                [
                                    -16.003437, 
                                    -36.207726
                                ], 
                                [
                                    -16.003437, 
                                    -36.207726
                                ], 
                                [
                                    -16.073904, 
                                    -36.193064
                                ], 
                                [
                                    -16.079613, 
                                    -36.194838
                                ], 
                                [
                                    -16.343729, 
                                    -36.140707
                                ], 
                                [
                                    -16.343453, 
                                    -36.137129
                                ], 
                                [
                                    -16.34433, 
                                    -36.136821
                                ]
                            ]
                        ]
                    }, 
                    "type": "Feature", 
                    "properties": {
                        "productIdentifier": "S2B_MSIL1C_20200621T111039_N0209_R008_T28HCE_20200621T132349", 
                        "datetime": "2020-06-21T11:11:28.371000Z"
                    }
                }, 
                "required": [
                    "type", 
                    "geometry", 
                    "properties"
                ], 
                "type": "object", 
                "description": "Feature ingested by resto", 
                "properties": {
                    "geometry": {
                        "required": [
                            "type", 
                            "geometry"
                        ], 
                        "type": "object", 
                        "description": "Geometry definition", 
                        "properties": {
                            "type": {
                                "enum": [
                                    "Point", 
                                    "MultiPoint", 
                                    "LineString", 
                                    "MultiLineString", 
                                    "Polygon", 
                                    "MultiPolygon", 
                                    "GeometryCollection"
                                ], 
                                "type": "string", 
                                "description": "Geometry type following GeoJSON specification"
                            }, 
                            "coordinates": {
                                "items": {
                                    "type": "number"
                                }, 
                                "type": "array", 
                                "description": "Geometry vertices following GeoJSON specification"
                            }
                        }
                    }, 
                    "type": {
                        "enum": [
                            "Feature"
                        ], 
                        "type": "string", 
                        "description": "Always set to *feature*"
                    }, 
                    "id": {
                        "type": "string", 
                        "description": "Feature identifier"
                    }, 
                    "properties": {
                        "type": "object", 
                        "description": "Feature properties mainly based on *[OGC-13-026r8] OGC OpenSearch Extension for Earth Observation*. Only non null properties are returned", 
                        "properties": {
                            "status": {
                                "type": "integer", 
                                "description": "[Unused]"
                            }, 
                            "productIdentifier": {
                                "type": "string", 
                                "description": "Original product identifier"
                            }, 
                            "datetime": {
                                "type": "string", 
                                "description": "Start/end of feature life (e.g. start of acquisition for a satellite imagery) (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ/YYYY-MM-DD-THH:MM:SSZ)"
                            }, 
                            "description": {
                                "type": "string", 
                                "description": "Descritipon of the feature. Each hashtag within the description is indexed to speedup search"
                            }, 
                            "title": {
                                "type": "string", 
                                "description": "A name given to the feature"
                            }
                        }
                    }
                }
            }, 
            "GenericError": {
                "required": [
                    "ErrorCode", 
                    "ErrorMessage"
                ], 
                "type": "object", 
                "properties": {
                    "ErrorCode": {
                        "type": "integer", 
                        "description": "HTTP status code"
                    }, 
                    "ErrorMessage": {
                        "type": "string", 
                        "description": "Error message"
                    }
                }
            }
        }
    }, 
    "openapi": "3.0.0"
}
